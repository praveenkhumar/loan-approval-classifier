# -*- coding: utf-8 -*-
"""Loan_Approval_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1byEOaVw-z1PZUqnKo5bhoMTgLMK-DiGM
"""

import pandas as pd

# Read the uploaded CSV file
df = pd.read_csv('loan_data.csv')

# View first few rows
df.head()

# Shape of dataset
print("Shape:", df.shape)

# Column types and missing values
df.info()

# Statistical overview
df.describe()

# Check distribution of categorical columns
print(df['Gender'].value_counts())
print("\n")
print(df['Married'].value_counts())
print("\n")
print(df['Education'].value_counts())
print("\n")
print(df['Loan_Status'].value_counts())

# Missing values
df.isnull().sum()

from sklearn.preprocessing import LabelEncoder

# Create encoder
le = LabelEncoder()

# Encode categorical columns
df['Gender'] = le.fit_transform(df['Gender'])
df['Married'] = le.fit_transform(df['Married'])
df['Education'] = le.fit_transform(df['Education'])
df['Loan_Status'] = le.fit_transform(df['Loan_Status'])  # Y=1, N=0

# Features (X) and target (y)
X = df.drop('Loan_Status', axis=1)
y = df['Loan_Status']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression

# Create model
model = LogisticRegression()

# Train it
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Detailed Classification Report
print("Classification Report:\n", classification_report(y_test, y_pred, zero_division=0))

y.value_counts()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

# Generate confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Plot it
plt.figure(figsize=(5,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Rejected','Approved'], yticklabels=['Rejected','Approved'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Compare side-by-side
comparison = pd.DataFrame({'Actual': y_test.values, 'Predicted': y_pred})
comparison.head(10)  # View first 10 predictions

